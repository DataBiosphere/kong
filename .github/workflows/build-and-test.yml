name: Build and Test

on:
  push:
    branches: [ dev ]
    paths-ignore: [ '*.md' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        ports: [ "5432:5432" ]
        # Rather than specifying the health check here, we do it manually later to give Postgres
        # time to start while we restore dependencies.

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}

      - name: Make sure Postgres is ready and init
        env:
          PGPASSWORD: postgres
        run: |
          pg_isready -h localhost -t 10
          psql -h localhost -U postgres -f ./common/postgres-init.sql

      - name: Build and test with coverage
        run: ./gradlew jacocoTestReport

      - name: Codecov
        uses: codecov/codecov-action@v2.0.2
        with:
          files: ./service/build/reports/jacoco/test/jacocoTestReport.xml

      - name: Upload spotbugs results
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: service/build/reports/spotbugs/main.sarif

      - name: Render GitHub Secrets
        env:
          # Copied to GH from vault location: "secret/dsde/firecloud/dev/common/firecloud-account.json"
          DEV_FIRECLOUD_ACCOUNT: ${{ secrets.DEV_FIRECLOUD_ACCOUNT }}
        run: echo "$DEV_FIRECLOUD_ACCOUNT" >"./integration/src/main/resources/rendered/user-delegated-sa.json"

      - name: Launch the background process for integration tests
        run: ./gradlew :service:bootRunDev | tee bootrun.log &
        # Starting this now so it has time to initialize while we jib

      - name: Build image locally with jib
        # build the docker image to make sure it does not error
        run: './gradlew :service:jibDockerBuild -Djib.console=plain'

      - name: Wait for boot run to be ready
        run: |
          timeout 60 bash -c 'until echo > /dev/tcp/localhost/8080; do sleep 1; done'
          resultStatus=$(echo > /dev/tcp/localhost/8080; echo $?)
          if [[ $resultStatus == 0 ]]; then
            echo "Server started successfully"
          else
            echo "Server did not start successfully. Dumping log file"
            cat bootrun.log
            exit 1
          fi

      - name: Run the integration test suite
        run: ./gradlew :integration:runTest --args="suites/FullIntegration.json /tmp/foo"

      - name: Notify slack on failure
        uses: 8398a7/action-slack@v3
        if: ${{ failure() && github.ref == 'refs/heads/dev' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.POLICY_INT_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          author_name: Build on dev
          fields: job,message
          text: 'Build failed :sadpanda:'

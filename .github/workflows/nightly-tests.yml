# This workflow runs ECM's nightly tests, which currently only includes performance tests

name: Nightly Tests

on:
  workflow_dispatch: {}
  repository_dispatch:
    types: [nightly-tests]

jobs:
  performance-tests:
    runs-on: [self-hosted]

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v2

      - name: Get version files from terra-helmfile
        env:
          BROADBOT_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
        run: |
          curl -H "Authorization: token ${BROADBOT_TOKEN}" \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/versions/app/dev.yaml \
            --create-dirs -o "integration/terra-helmfile/versions/app/dev.yaml"
          curl -H "Authorization: token ${BROADBOT_TOKEN}" \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/environments/live/perf.yaml \
            --create-dirs -o "integration/terra-helmfile/environments/live/perf.yaml"

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ github.ref }}-${{ github.sha }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ github.ref }}

      # Github workflows shouldn't have access to vault, so we read from GitHub secrets instead.
      - name: Render GitHub Secrets
        env:
          DEV_FIRECLOUD_ACCOUNT_B64: ${{ secrets.DEV_FIRECLOUD_ACCOUNT_B64 }}
          PERF_TESTRUNNER_ACCOUNT_B64: ${{ secrets.PERF_TESTRUNNER_ACCOUNT_B64 }}
          DEV_APP_SERVICE_ACCOUNT_B64: ${{ secrets.DEV_APP_SERVICE_ACCOUNT_B64 }}
        run: |
          echo "$DEV_FIRECLOUD_ACCOUNT_B64" | base64 -d >"./integration/src/main/resources/rendered/user-delegated-sa.json"
          echo "$PERF_TESTRUNNER_ACCOUNT_B64" | base64 -d >"./integration/src/main/resources/rendered/testrunner-sa.json"
          echo "$DEV_APP_SERVICE_ACCOUNT_B64" | base64 -d >"./service/src/main/resources/rendered/ecm-sa.json"

      # Install postgres:
      # - Create the file repository configuration.
      # - Import the repository signing key.
      # - Update the package lists.
      # - Install the latest version of PostgreSQL. If you want a specific version, use 'postgresql-12' or similar instead of 'postgresql':
      - name: Install the latest postgres
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo sh -c 'curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - '
          sudo apt-get update
          sudo apt-get -y install postgresql

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'externalcreds-perf-sqlproxy@broad-dsde-perf.iam.gserviceaccount.com'

      - name: Start sql proxy
        env:
          HOST: ${{ secrets.PERF_DB_HOST }}
        run: |
          docker run -d --name sql-proxy -v $GOOGLE_APPLICATION_CREDENTIALS:/etc/sqlproxy-service-account.json -e GOOGLE_PROJECT=broad-dsde-perf -e CLOUDSQL_ZONE=us-central1 -e CLOUDSQL_INSTANCE=${HOST} -e PORT=5432 -p "5432:5432" broadinstitute/cloudsqlproxy:1.11_20191120

      - name: Wait for sql proxy to be ready
        run: |
          x=1
          until docker logs ${PROXY_NAME} 2>&1 | grep -o "Ready for new connections"
          do
            if [ $(( x++ )) -ge 60 ]; then
              echo "sql proxy not ready after 1 minute, logs follow"
              docker logs sql-proxy
              exit 1
            else
              sleep 1
            fi
          done

      - name: Repopulate perf database
        env:
          PGPASSWORD: ${{ secrets.PERF_DB_PASSWORD }}
          DB_USER: ${{ secrets.PERF_DB_USER }}
          DB_NAME: ${{ secrets.PERF_DB_NAME }}
        run: |
          psql "host=127.0.0.1 port=5432 sslmode=disable dbname=${DB_NAME} user=${DB_USER}" < "integration/src/main/resources/datageneration/regenerate_perf_data.sql"

      - name: Stop sql proxy
        if: always()
        continue-on-error: true
        run: docker rm -f sql-proxy

      - name: Run the perf test suite
        run: ./gradlew --build-cache runTest --args="suites/FullPerf.json /tmp/test-results"

      - name: Upload results to Google Bucket
        run: ./gradlew uploadResults --args="CompressDirectoryToTerraKernelK8S.json /tmp/test-results"

#  notify-slack:
#   needs: [ performance-tests ]
#   runs-on: ubuntu-latest
#
#   if: failure()
#
#   steps:
#     - name: Notify slack on failure
#       uses: 8398a7/action-slack@v3
#       env:
#         SLACK_WEBHOOK_URL: ${{ secrets.POLICY_INT_WEBHOOK_URL }}
#       with:
#         status: failure
#         author_name: Test Runner
#         fields: workflow,message
#         text: 'Nightly perf tests failed :sadpanda:'

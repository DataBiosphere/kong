plugins {
	id 'jacoco'

	id 'org.springframework.boot'

	id 'com.diffplug.spotless'
	id 'com.github.ben-manes.versions' version '0.42.0'
	id 'com.github.spotbugs' version '5.0.6'
	id 'com.google.cloud.tools.jib'
	id 'com.gorylenko.gradle-git-properties' version '2.4.0'
	id 'io.freefair.lombok'
	id 'org.hidetake.swagger.generator'
	id 'org.sonarqube'
}

repositories {
	mavenCentral()
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-snapshot' }
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release' }
}

apply from: 'publishing.gradle'
apply from: 'spring.gradle'
apply from: 'generators.gradle'
apply from: 'tooling.gradle'
apply from: 'analysis.gradle'

dependencies {
	// google
	implementation platform('com.google.cloud:libraries-bom:25.1.0')
	implementation 'com.google.cloud:google-cloud-pubsub:1.116.3'
	implementation 'com.google.cloud:google-cloud-kms:2.4.2'

	annotationProcessor 'org.immutables:value:2.9.0'
	implementation 'bio.terra:terra-common-lib:0.0.60-SNAPSHOT'
	implementation 'org.broadinstitute.dsde.workbench:sam-client_2.13:0.1-96c5f4d'
	// https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
	implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
	implementation 'org.codehaus.janino:janino:3.1.7' // Provides if/else xml parsing for logback config
	implementation('org.springframework.cloud:spring-cloud-gcp-starter-logging:1.2.8.RELEASE') {
		exclude group: 'org.springframework', module: 'spring-jcl'
	}
	// for testing with mock web server
	testImplementation 'org.mock-server:mockserver-netty:5.13.0'
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.4.0'
}

sonarqube {
	properties {
		property "sonar.projectName", "terra-external-credentials-manager-service"
		property "sonar.projectKey", "DataBiosphere_terra-external-credentials-manager"
		property "sonar.organization", "broad-databiosphere"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main/java,src/main/resources/templates"
	}
}

def googleCredentialsFile = "${rootDir}/service/src/main/resources/rendered/ecm-sa.json"
tasks.withType(Test) {
	environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
}

test { maxParallelForks = 1 }

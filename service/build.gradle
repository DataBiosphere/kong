plugins {
	id 'jacoco'

	id 'org.springframework.boot'

	id 'com.diffplug.spotless'
	id 'com.github.ben-manes.versions' version '0.42.0'
	id 'com.github.spotbugs' version '5.1.3'
	id 'com.google.cloud.tools.jib'
	id 'com.gorylenko.gradle-git-properties' version '2.4.0'
	id 'io.freefair.lombok'
	id 'org.hidetake.swagger.generator'
	id 'org.sonarqube'
}

repositories {
	mavenCentral()
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-snapshot' }
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release' }
}

apply from: 'publishing.gradle'
apply from: 'spring.gradle'
apply from: 'generators.gradle'
apply from: 'tooling.gradle'
apply from: 'analysis.gradle'

dependencies {
	// google
	implementation platform('com.google.cloud:libraries-bom:26.28.0')
	implementation 'com.google.cloud:google-cloud-pubsub'
	implementation 'com.google.cloud:google-cloud-kms'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-logging:4.9.0'

	annotationProcessor 'org.immutables:value:2.9.2'
	implementation 'bio.terra:terra-common-lib:0.1.9-SNAPSHOT'
	// https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk18on
	implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
	implementation 'org.codehaus.janino:janino:3.1.9' // Provides if/else xml parsing for logback config

	// for testing with mock web server
	testImplementation('org.mock-server:mockserver-netty:5.15.0') {
		// Incompatible with the version brought in as a non-test dependency
		exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
	}
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.4.0'

	// OpenTelemetry
	var openTelemetryVersion = '1.31.0'
	implementation "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
	implementation "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}"
	implementation "io.opentelemetry:opentelemetry-sdk-metrics:${openTelemetryVersion}"
	implementation "io.opentelemetry:opentelemetry-exporter-logging:${openTelemetryVersion}"
	implementation "io.opentelemetry.semconv:opentelemetry-semconv:1.21.0-alpha"
	implementation "io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:${openTelemetryVersion}-alpha"
	implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:${openTelemetryVersion}"
	implementation "io.opentelemetry.instrumentation:opentelemetry-spring-boot:${openTelemetryVersion}-alpha"
	implementation "com.google.cloud.opentelemetry:exporter-trace:0.25.2"
}

sonarqube {
	properties {
		property "sonar.projectName", "terra-external-credentials-manager-service"
		property "sonar.projectKey", "DataBiosphere_terra-external-credentials-manager"
		property "sonar.organization", "broad-databiosphere"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main/java,src/main/resources/templates"
	}
}

def googleCredentialsFile = "${rootDir}/service/src/main/resources/rendered/ecm-sa.json"
tasks.withType(Test) {
	environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
}

test { maxParallelForks = 1 }

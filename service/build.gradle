plugins {
	id 'jacoco'

	id 'org.springframework.boot'

	id 'com.diffplug.spotless'
	id 'com.github.ben-manes.versions' version '0.52.0'
	id 'com.github.spotbugs' version '5.1.3'
	id 'com.google.cloud.tools.jib'
	id 'com.gorylenko.gradle-git-properties' version '2.4.2'
	id 'io.freefair.lombok'
	id 'org.hidetake.swagger.generator'
	id 'org.sonarqube'
	id "io.sentry.jvm.gradle" version "5.1.0"
}

repositories {
	mavenCentral()
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-snapshot' }
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release' }
}

apply from: 'publishing.gradle'
apply from: 'spring.gradle'
apply from: 'generators.gradle'
apply from: 'tooling.gradle'
apply from: 'analysis.gradle'

dependencies {
	implementation 'org.broadinstitute.dsde.workbench:sam-client_2.13:v0.0.208'

	// google
	implementation platform('com.google.cloud:libraries-bom:26.54.0')
	implementation 'com.google.cloud:google-cloud-pubsub'
	implementation 'com.google.cloud:google-cloud-datastore'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-logging:6.0.0'

	annotationProcessor 'org.immutables:value:2.10.1'
	implementation('bio.terra:terra-common-lib:1.1.35-SNAPSHOT') {
		exclude group: 'io.kubernetes', module: 'client-java'
	}
	// https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk18on
	implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
	implementation 'org.codehaus.janino:janino:3.1.12' // Provides if/else xml parsing for logback config

	// for testing with mock web server
	testImplementation('org.mock-server:mockserver-netty:5.15.0') {
		// Incompatible with the version brought in as a non-test dependency
		exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
	}
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.15.2'

	testImplementation("au.com.dius.pact.provider:junit5:4.6.16")
	testImplementation('au.com.dius.pact.provider:junit5spring:4.6.16')
	testImplementation project(':client-resttemplate')

	implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.12.0"
	implementation "com.google.cloud.opentelemetry:exporter-trace:0.33.0"

	// For Micrometer metrics gathering
	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'org.apache.commons:commons-compress:1.27.1'

}

sonarqube {
	properties {
		property "sonar.projectName", "terra-external-credentials-manager-service"
		property "sonar.projectKey", "DataBiosphere_terra-external-credentials-manager"
		property "sonar.organization", "broad-databiosphere"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main/java,src/main/resources/templates"
	}
}

def googleCredentialsFile = "${rootDir}/service/src/main/resources/rendered/ecm-sa.json"
tasks.withType(Test) {
	environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
}

test {
	maxParallelForks = 1
	filter {
		excludeTestsMatching "VerifyServicePacts*"
	}
}

task verifyPacts( type: Test ) {
	useJUnitPlatform()
	systemProperty 'pact.provider.version', System.getenv('PACT_PROVIDER_VERSION')
	systemProperty 'pact.provider.branch',  System.getenv('PACT_PROVIDER_BRANCH')
	systemProperty 'pact.verifier.publishResults', System.getenv('PACT_PUBLISH_RESULTS')
	systemProperty 'pactbroker.auth.username', System.getenv('PACT_BROKER_USERNAME')
	systemProperty 'pactbroker.auth.password', System.getenv('PACT_BROKER_PASSWORD')
	systemProperty 'pactbroker.url', System.getenv('PACT_BROKER_URL')
	filter {
		includeTestsMatching "VerifyServicePacts*"
	}
}
